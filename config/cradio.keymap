/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>


&mt {
  //  flavor = "tap-preferred";
   // tapping_term_ms = <200>;
};

//	0 	1 	2	  3	  4	  	5	  6	  7	  8	  9
//	10	11	12	13	14		15	16	17	18	19
//	20	21	22	23	24		25	26	27	28	29
//				      30	31		32	33
// 		>;

/ {

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

         combo_tab {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&kp TAB>;
        };

            combo_ralt {
            timeout-ms = <50>;
            key-positions = <17 16>;
            bindings = <&kp RALT>;
        };

                    combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };

                           combo_lgui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        };


           combo_rgui {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RGUI>;
        };


          combo_lshift {
           timeout-ms = <50>;
           key-positions = <11 13>;
           bindings = <&kp LSHFT>;
         };

         combo_rshift {
          timeout-ms = <50>;
          key-positions = <16 18>;
          bindings = <&kp RSHFT>;
        };

    };

    behaviors {
        sp: sticky_press {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_PRESS";
            #binding-cells = <2>;
            tapping_term_ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&sl>, <&kp>;
        };

    };

        keymap {
                compatible = "zmk,keymap";

       		default_layer {
		bindings = <
		&kp Q      &kp W &kp E &kp R &kp T 						&kp Y   &kp U  &kp I    &kp O   &kp P
		&kp A      &kp S &kp D &kp F &kp G 			      &kp H   &kp J  &kp K    &kp L   &kp QUOT
		&sp 4 Z    &kp X &kp C &kp V &kp B				    &kp N   &kp M  &kp CMMA &kp DOT &mt RCTL DEL
          				         &mo 1 &kp BKSP  				&kp SPC &mo 2
		>;
		};

       		left_layer {
		bindings = <
		&kp NUM_1  &kp NUM_2    &kp NUM_3       &kp NUM_4        &kp NUM_5        &kp NUM_6 &kp NUM_7 &kp NUM_8 &kp NUM_9 &kp NUM_0
		&to 5    &kp LC(S)    &kp DQT         &kp PIPE2        &kp HASH 	    	&kp PLUS  &kp LEFT  &kp DOWN  &kp UP     &kp RIGHT
		&kp ESC    &kp TILDE    &kp NON_US_BSLH &kp NON_US_HASH  &kp TILDE2     	&kp MINUS &kp GRAVE &kp LBKT  &kp RBKT   &kp DEL
					                                  &mo 1            &kp LGUI  	     	&kp RET   &kp RGUI
		>;
		};

		right_layer {
		bindings = <
		&kp BANG  &kp ATSN   &kp HASH  &kp DLLR  &kp PRCT    			&kp CRRT  &kp AMPS  &kp KMLT  &kp LPRN  &kp RPRN
		&kp HASH  &kp QMARK  &kp FSLH  &kp COLN  &kp SCLN 			  &kp MINUS &kp EQUAL &kp LBRC  &kp RBRC  &kp BKSP
		&kp LSFT  &kp CAPS   &kp LBKT  &kp RBKT  &kp BSLH    			&kp UNDER &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT
					                         &mo 3     &kp LCTL  				&kp SPC   &mo 2
		>;
		};

		tri_layer {
		bindings = <
		&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &kp NUM_5 		  	&to 6  &trans     &trans        &out OUT_USB     &out OUT_BLE
		&kp F1        &kp F2        &kp F3        &kp F4     &kp F5  			  	&trans &kp LG(LC(T))  &kp LG(LS(C))  &kp LG(LS(S)) &kp LG(LS(QUOT))
		&bt BT_CLR    &bt BT_NXT    &bt BT_PRV    &kp F6     &kp F7   				&trans &kp LG(LS(A))  &kp LG(LS(O))  &kp LG(LS(Q))    &trans
					                                    &trans     &trans  					&trans &trans
		>;
    };

    caps_layer {
    bindings = <
    &kp LS(Q)  &kp LS(W)    &kp LS(E)    &kp LS(R)    &kp LS(T) 			&kp LS(Y) &kp LS(U)   &kp LS(I)  &kp LS(O)  &kp LS(P)
    &kp LS(A) &kp LS(S) &kp LS(D) &kp LS(F) &kp LS(G)  						&kp LS(H) &kp LS(J)  &kp LS(K) &kp LS(L) &kp LS(QUOT)
    &kp LS(Z) &kp LS(X) &kp LS(C) &kp LS(V) &kp LS(B)   				&kp LS(N) &kp LS(M)  &kp K_VOL_DN  &trans &trans
           &caps_word &trans  					&trans &trans
    >;
    };

    navnum_layer {
    bindings = <
    &to 0      &kp HOME     &kp UP       &kp END      &kp DEL 			      &kp KMLT   &kp NUM_7   &kp NUM_8     &kp NUM_9  &kp BKSP
    &kp LSHIFT &kp LEFT     &kp DOWN     &kp RIGHT    &sk LS(LCTRL)			  &kp EQUAL  &kp NUM_4   &kp NUM_5     &kp NUM_6  &kp PLUS
    &kp LC(Z)  &kp LC(X)    &kp LC(C)    &kp LC(V)    &kp LC(Y)   				&kp DOT    &kp NUM_1   &kp NUM_2     &kp NUM_3  &kp FSLH
                                         &kp RET      &kp BKSP  					&kp RET    &kp NUM_0
    >;
		};

    colemak_layer {
    bindings = <
    &kp Q      &kp W &kp F &kp P &kp B 						&kp J   &kp L  &kp U    &kp Y   &kp QUOT
    &kp A      &kp R &kp S &kp T &kp G 			      &kp M   &kp N  &kp E    &kp I   &kp O
    &sp 10 Z   &kp X &kp C &kp D &kp V				    &kp K   &kp H  &kp CMMA &kp DOT &mt RCTL DEL
                     &mo 7 &kp BKSP  				      &kp SPC &mo 8
    >;
    };

    cmleft_layer {
    bindings = <
    &kp NUM_1  &kp NUM_2    &kp NUM_3       &kp NUM_4        &kp NUM_5        &kp NUM_6 &kp NUM_7 &kp NUM_8 &kp NUM_9 &kp NUM_0
    &to 11     &kp LC(S)    &kp DQT         &kp PIPE2        &kp HASH 	    	&kp PLUS  &kp LEFT  &kp DOWN  &kp UP     &kp RIGHT
    &kp ESC    &kp TILDE    &kp NON_US_BSLH &kp NON_US_HASH  &kp TILDE2     	&kp MINUS &kp GRAVE &kp LBKT  &kp RBKT   &kp DEL
                                      &mo 7 &kp LGUI  	     	&kp RET   &kp RGUI
    >;
    };

    cmright_layer {
    bindings = <
    &kp BANG  &kp ATSN   &kp HASH  &kp DLLR  &kp PRCT    			&kp CRRT  &kp AMPS  &kp KMLT  &kp LPRN  &kp RPRN
    &kp HASH  &kp QMARK  &kp FSLH  &kp COLN  &kp SCLN 			  &kp MINUS &kp EQUAL &kp LBRC  &kp RBRC  &kp BKSP
    &kp LSFT  &kp KPLS   &kp LBKT  &kp RBKT  &kp BSLH    			&kp UNDER &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT
                             &mo 9     &kp LCTL  			      	&kp SPC   &mo 8
    >;
    };

    cmtri_layer {
    bindings = <
    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &kp NUM_4  &kp NUM_5 		  	&to 0 &trans     &trans        &out OUT_USB     &out OUT_BLE
    &kp F1        &kp F2        &kp F3        &kp F4     &kp F5  			  	&trans &kp PG_UP  &kp K_VOL_UP  &kp K_MUTE &trans
    &bt BT_CLR    &bt BT_NXT    &bt BT_PRV    &kp F6     &kp F7   				&trans &kp PG_DN  &kp K_VOL_DN  &trans     &trans
                                        &trans     &trans  					     &trans &trans
    >;
    };

    cmcaps_layer {
    bindings = <
    &kp LS(Q)  &kp LS(W)   &kp LS(F)    &kp LS(P)    &kp LS(B) 		    	&kp LS(J) &kp LS(L)   &kp LS(U)  &kp LS(Y)  &kp LS(QUOT)
    &kp LS(A)  &kp LS(R)   &kp LS(S)    &kp LS(T)    &kp LS(G)  				&kp LS(M) &kp LS(N)  &kp LS(E) &kp LS(I) &kp LS(O)
    &kp LS(Z)  &kp LS(X)   &kp LS(C)    &kp LS(D)    &kp LS(V)   				&kp LS(K) &kp LS(H)  &kp K_VOL_DN  &trans &trans
                                   &caps_word &trans  				        	&trans &trans
    >;
    };

    cmnavnum_layer {
    bindings = <
    &to 6      &kp HOME     &kp UP       &kp END      &kp DEL 			      &kp KMLT   &kp NUM_7   &kp NUM_8     &kp NUM_9  &kp BKSP
    &kp LSHIFT &kp LEFT     &kp DOWN     &kp RIGHT    &sk LS(LCTRL)			  &kp EQUAL  &kp NUM_4   &kp NUM_5     &kp NUM_6  &kp PLUS
    &kp LC(Z)  &kp LC(X)    &kp LC(C)    &kp LC(V)    &kp LC(Y)   				&kp DOT    &kp NUM_1   &kp NUM_2     &kp NUM_3  &kp FSLH
                                   &kp RET      &kp BKSP  					      &kp RET    &kp NUM_0
    >;
    };

	};
};
